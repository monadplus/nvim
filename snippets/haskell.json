{
  "pragma": {
    "prefix": [
      "lang",
      "pragma"
    ],
    "body": [
      "{-# LANGUAGE ${1:extension} #-}$0"
    ],
    "description": "Language extension pragma"
  },
  "opt pragma": {
    "prefix": [
      "opts",
      "ghcoptions"
    ],
    "body": [
      "{-# OPTIONS_GHC ${1:opt} #-}$0"
    ],
    "description": "GHC options pragma"
  },
  "case": {
    "prefix": [
      "case"
    ],
    "body": [
      "case ${1:expression} of",
      "  ${2:case1} -> ${3:result}$0"
    ],
    "description": "Case statement"
  },
  "block_comment": {
    "prefix": [
      "--",
      "comment",
      "block_comment"
    ],
    "body": [
      "{- $0 -}"
    ],
    "description": "Block Comment"
  },
  "data_inline": {
    "prefix": [
      "data"
    ],
    "body": [
      "data ${1:type} = ${2:data}$0 ${3:deriving (${4:Show, Eq})}"
    ],
    "description": "Inline data"
  },
  "data_record": {
    "prefix": [
      "data record"
    ],
    "body": [
      "data ${1:Type} = $1",
      "\t{ ${2:field} :: ${3:Type}",
      "\t, ${4:field} :: ${5:Type}$0",
      "\t} ${6:deriving (${7:Show, Eq})}"
    ],
    "description": "Data record"
  },
  "if_inline": {
    "prefix": [
      "if inline"
    ],
    "body": [
      "if ${1:condition} then ${2:undefined} else ${3:undefined}$0"
    ],
    "description": "If inline"
  },
  "if": {
    "prefix": [
      "if"
    ],
    "body": [
      "if ${1:condition}",
      "\tthen ${2:undefined}",
      "\telse ${3:undefined}$0"
    ],
    "description": "If block"
  },
  "import": {
    "prefix": [
      "imp"
    ],
    "body": [
      "import ${1:module} ${2:(${3:f})}$0"
    ],
    "description": "Simple import"
  },
  "import_qualified": {
    "prefix": [
      "imp qualified"
    ],
    "body": [
      "import qualified ${1:module} as ${2:name}"
    ],
    "description": "Qualified import"
  },
  "instance": {
    "prefix": [
      "inst"
    ],
    "body": [
      "instance ${1:Class} ${2:Data} where",
      "\t${3:f} = ${4:undefined}$0"
    ],
    "description": "typeclass instance"
  },
  "lambda": {
    "prefix": [
      "\\",
      "lambda"
    ],
    "body": [
      "\\${1:x} -> ${2:undefined}$0"
    ],
    "description": "lambda function"
  },
  "let": {
    "prefix": [
      "let"
    ],
    "body": [
      "let ${1:x} = ${2:undefined}$0"
    ],
    "description": "let statement"
  },
  "main": {
    "prefix": [
      "main"
    ],
    "body": [
      "module Main where",
      "",
      "",
      "main :: IO ()",
      "main = do",
      "\t${1:undefined}$0",
      "return ()"
    ],
    "description": "main module"
  },
  "module": {
    "prefix": [
      "mods",
      "mod simple"
    ],
    "body": [
      "module ${1:mod} where$0"
    ],
    "description": "simple module"
  },
  "module exports": {
    "prefix": [
      "modu",
      "mod exports"
    ],
    "body": [
      "module ${1:mod} (",
      "\t\t${2:export}",
      "\t${3:, ${4:export}}",
      ") where$0"
    ],
    "description": "simple module with exports"
  },
  "newtype": {
    "prefix": [
      "new"
    ],
    "body": [
      "newtype ${1:Type} ${2:a} = $1 { un$1 :: ${3:a} } ${4:deriving (${5:Show, Eq})}$0"
    ],
    "description": "Newtype definition"
  }
}
